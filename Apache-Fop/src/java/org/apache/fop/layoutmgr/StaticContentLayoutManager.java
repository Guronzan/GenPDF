/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* $Id: StaticContentLayoutManager.java 808157 2009-08-26 18:50:10Z vhennebert $ */

package org.apache.fop.layoutmgr;

import java.util.LinkedList;
import java.util.List;

import org.apache.fop.area.Area;
import org.apache.fop.area.Block;
import org.apache.fop.area.RegionReference;
import org.apache.fop.fo.Constants;
import org.apache.fop.fo.FObj;
import org.apache.fop.fo.pagination.PageSequence;
import org.apache.fop.fo.pagination.SideRegion;
import org.apache.fop.fo.pagination.StaticContent;
import org.apache.fop.layoutmgr.PageBreakingAlgorithm.PageBreakingLayoutListener;
import org.apache.fop.layoutmgr.inline.TextLayoutManager;

/**
 * LayoutManager for an fo:flow object. Its parent LM is the
 * PageSequenceLayoutManager. This LM is responsible for getting columns of the
 * appropriate size and filling them with block-level areas generated by its
 * children.
 */
public class StaticContentLayoutManager extends BlockStackingLayoutManager {

    private RegionReference targetRegion;
    private Block targetBlock;
    private SideRegion regionFO;

    private int contentAreaIPD = 0;
    private int contentAreaBPD = -1;

    /**
     * Creates a new StaticContentLayoutManager.
     * 
     * @param pslm
     *            PageSequenceLayoutManager this layout manager belongs to
     * @param node
     *            static-content FO
     * @param reg
     *            side region to layout into
     */
    public StaticContentLayoutManager(final PageSequenceLayoutManager pslm,
            final StaticContent node, final SideRegion reg) {
        super(node);
        setParent(pslm);
        this.regionFO = reg;
        this.targetRegion = getCurrentPV().getRegionReference(
                this.regionFO.getNameId());
    }

    /**
     * Creates a new StaticContentLayoutManager.
     * 
     * @param pslm
     *            PageSequenceLayoutManager this layout manager belongs to
     * @param node
     *            static-content FO
     * @param block
     *            the block to layout into
     */
    public StaticContentLayoutManager(final PageSequenceLayoutManager pslm,
            final StaticContent node, final Block block) {
        super(node);
        setParent(pslm);
        this.targetBlock = block;
    }

    /** {@inheritDoc} */
    @Override
    public List getNextKnuthElements(final LayoutContext context,
            final int alignment) {
        throw new IllegalStateException();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void addAreas(final PositionIterator parentIter,
            final LayoutContext layoutContext) {
        AreaAdditionUtil.addAreas(this, parentIter, layoutContext);

        flush();
        this.targetRegion = null;
    }

    /**
     * Add child area to a the correct container, depending on its area class. A
     * Flow can fill at most one area container of any class at any one time.
     * The actual work is done by BlockStackingLM. {@inheritDoc}
     */
    @Override
    public void addChildArea(final Area childArea) {
        if (getStaticContentFO().getFlowName().equals("xsl-footnote-separator")) {
            this.targetBlock.addBlock((Block) childArea);
        } else {
            this.targetRegion.addBlock((Block) childArea);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Area getParentArea(final Area childArea) {
        if (getStaticContentFO().getFlowName().equals("xsl-footnote-separator")) {
            return this.targetBlock;
        } else {
            return this.targetRegion;
        }
    }

    /**
     * Does the layout for a side region. Called by PageSequenceLayoutManager.
     */
    public void doLayout() {
        int targetIPD = 0;
        int targetBPD = 0;
        int targetAlign = EN_AUTO;
        boolean autoHeight = false;
        StaticContentBreaker breaker;

        if (getStaticContentFO().getFlowName().equals("xsl-footnote-separator")) {
            targetIPD = this.targetBlock.getIPD();
            targetBPD = this.targetBlock.getBPD();
            if (targetBPD == 0) {
                autoHeight = true;
            }
            targetAlign = EN_BEFORE;
        } else {
            targetIPD = this.targetRegion.getIPD();
            targetBPD = this.targetRegion.getBPD();
            targetAlign = this.regionFO.getDisplayAlign();
        }
        setContentAreaIPD(targetIPD);
        setContentAreaBPD(targetBPD);
        breaker = new StaticContentBreaker(this, targetIPD, targetAlign);
        breaker.doLayout(targetBPD, autoHeight);
        if (breaker.isOverflow()) {
            if (!autoHeight) {
                final String page = getPSLM().getCurrentPage()
                        .getPageViewport().getPageNumberString();

                final BlockLevelEventProducer eventProducer = BlockLevelEventProducer.Provider
                        .get(getStaticContentFO().getUserAgent()
                                .getEventBroadcaster());
                final boolean canRecover = this.regionFO.getOverflow() != EN_ERROR_IF_OVERFLOW;
                final boolean needClip = this.regionFO.getOverflow() == Constants.EN_HIDDEN
                        || this.regionFO.getOverflow() == Constants.EN_ERROR_IF_OVERFLOW;
                eventProducer.regionOverflow(this, this.regionFO.getName(),
                        page, breaker.getOverflowAmount(), needClip,
                        canRecover, getStaticContentFO().getLocator());
            }
        }
    }

    /**
     * Convenience method that returns the Static Content node.
     * 
     * @return the static content node
     */
    protected StaticContent getStaticContentFO() {
        return (StaticContent) this.fobj;
    }

    private class StaticContentBreaker extends AbstractBreaker {
        private final StaticContentLayoutManager lm;
        private final int displayAlign;
        private final int ipd;
        private int overflow = 0;

        public StaticContentBreaker(final StaticContentLayoutManager lm,
                final int ipd, final int displayAlign) {
            this.lm = lm;
            this.ipd = ipd;
            this.displayAlign = displayAlign;
        }

        /** {@inheritDoc} */
        @Override
        protected void observeElementList(final List elementList) {
            String elementListID = getStaticContentFO().getFlowName();
            final String pageSequenceID = ((PageSequence) this.lm.getParent()
                    .getFObj()).getId();
            if (pageSequenceID != null && pageSequenceID.length() > 0) {
                elementListID += "-" + pageSequenceID;
            }
            ElementListObserver.observe(elementList, "static-content",
                    elementListID);
        }

        /** {@inheritDoc} */
        @Override
        protected boolean isPartOverflowRecoveryActivated() {
            // For side regions, this must be disabled because of wanted
            // overflow.
            return false;
        }

        public boolean isOverflow() {
            return this.overflow != 0;
        }

        public int getOverflowAmount() {
            return this.overflow;
        }

        /** {@inheritDoc} */
        @Override
        protected PageBreakingLayoutListener createLayoutListener() {
            return new PageBreakingLayoutListener() {

                @Override
                public void notifyOverflow(final int part, final int amount,
                        final FObj obj) {
                    if (StaticContentBreaker.this.overflow == 0) {
                        StaticContentBreaker.this.overflow = amount;
                    }
                }

            };
        }

        @Override
        protected LayoutManager getTopLevelLM() {
            return this.lm;
        }

        @Override
        protected LayoutContext createLayoutContext() {
            final LayoutContext lc = super.createLayoutContext();
            lc.setRefIPD(this.ipd);
            return lc;
        }

        @Override
        protected List getNextKnuthElements(final LayoutContext context,
                final int alignment) {
            LayoutManager curLM; // currently active LM
            final List returnList = new LinkedList();

            while ((curLM = getChildLM()) != null) {
                final LayoutContext childLC = new LayoutContext(0);
                childLC.setStackLimitBP(context.getStackLimitBP());
                childLC.setRefIPD(context.getRefIPD());
                childLC.setWritingMode(context.getWritingMode());

                List returnedList = null;
                // The following is a HACK! Ignore leading and trailing white
                // space
                final boolean ignore = curLM instanceof TextLayoutManager;
                if (!curLM.isFinished()) {
                    returnedList = curLM.getNextKnuthElements(childLC,
                            alignment);
                }
                if (returnedList != null && !ignore) {
                    this.lm.wrapPositionElements(returnedList, returnList);
                }
            }
            SpaceResolver.resolveElementList(returnList);
            setFinished(true);
            return returnList;
        }

        @Override
        protected int getCurrentDisplayAlign() {
            return this.displayAlign;
        }

        @Override
        protected boolean hasMoreContent() {
            return !this.lm.isFinished();
        }

        @Override
        protected void addAreas(final PositionIterator posIter,
                final LayoutContext context) {
            AreaAdditionUtil.addAreas(this.lm, posIter, context);
        }

        @Override
        protected void doPhase3(final PageBreakingAlgorithm alg,
                final int partCount, final BlockSequence originalList,
                final BlockSequence effectiveList) {
            if (partCount > 1) {
                final PageBreakPosition pos = alg.getPageBreaks().getFirst();
                final int firstPartLength = ElementListUtils.calcContentLength(
                        effectiveList, effectiveList.ignoreAtStart,
                        pos.getLeafPos());
                this.overflow += alg.totalWidth - firstPartLength;
            }
            // Rendering all parts (not just the first) at once for the case
            // where the parts that
            // overflow should be visible.
            alg.removeAllPageBreaks();
            // Directly add areas after finding the breaks
            this.addAreas(alg, 1, originalList, effectiveList);
        }

        @Override
        protected void finishPart(final PageBreakingAlgorithm alg,
                final PageBreakPosition pbp) {
            // nop for static content
        }

        @Override
        protected LayoutManager getCurrentChildLM() {
            return null; // TODO NYI
        }
    }

    /**
     * Returns the IPD of the content area
     * 
     * @return the IPD of the content area
     */
    @Override
    public int getContentAreaIPD() {
        return this.contentAreaIPD;
    }

    /** {@inheritDoc} */
    @Override
    protected void setContentAreaIPD(final int contentAreaIPD) {
        this.contentAreaIPD = contentAreaIPD;
    }

    /**
     * Returns the BPD of the content area
     * 
     * @return the BPD of the content area
     */
    @Override
    public int getContentAreaBPD() {
        return this.contentAreaBPD;
    }

    private void setContentAreaBPD(final int contentAreaBPD) {
        this.contentAreaBPD = contentAreaBPD;
    }

    /** {@inheritDoc} */
    @Override
    public Keep getKeepTogether() {
        return Keep.KEEP_AUTO;
    }

    /** {@inheritDoc} */
    @Override
    public Keep getKeepWithNext() {
        return Keep.KEEP_AUTO;
    }

    /** {@inheritDoc} */
    @Override
    public Keep getKeepWithPrevious() {
        return Keep.KEEP_AUTO;
    }

}
